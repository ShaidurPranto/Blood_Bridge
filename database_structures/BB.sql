/*
 Navicat Premium Data Transfer

 Source Server         : Oracle
 Source Server Type    : Oracle
 Source Server Version : 190000 (Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production)
 Source Schema         : BB

 Target Server Type    : Oracle
 Target Server Version : 190000 (Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production)
 File Encoding         : 65001

 Date: 26/07/2024 14:36:58
*/


-- ----------------------------
-- Table structure for BANK_DONOR_APPOINTMENTS
-- ----------------------------
DROP TABLE "BB"."BANK_DONOR_APPOINTMENTS";
CREATE TABLE "BB"."BANK_DONOR_APPOINTMENTS" (
  "DONATIONID" NUMBER VISIBLE NOT NULL,
  "BANKID" NUMBER VISIBLE NOT NULL,
  "DONORID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "DONATION_DATE" DATE VISIBLE NOT NULL,
  "TIME" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "STATUS" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "DONOR_RATING" NUMBER VISIBLE,
  "DONOR_REVIEW" VARCHAR2(200 BYTE) VISIBLE,
  "BANK_RATING" NUMBER VISIBLE,
  "BANK_REVIEW" VARCHAR2(200 BYTE) VISIBLE,
  "DESCRIPTION" VARCHAR2(200 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for BANK_REPORTS_DONOR
-- ----------------------------
DROP TABLE "BB"."BANK_REPORTS_DONOR";
CREATE TABLE "BB"."BANK_REPORTS_DONOR" (
  "DONATIONID" NUMBER VISIBLE NOT NULL,
  "ISSUE" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "DOCUMENT" VARCHAR2(500 BYTE) VISIBLE,
  "STATUS" VARCHAR2(20 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for BANK_SIGNUP_REQEUSTS
-- ----------------------------
DROP TABLE "BB"."BANK_SIGNUP_REQEUSTS";
CREATE TABLE "BB"."BANK_SIGNUP_REQEUSTS" (
  "REQUESTID" NUMBER VISIBLE DEFAULT "BB"."SEQ_BANK_SIGNUP_REQUESTS"."NEXTVAL" NOT NULL,
  "NAME" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "DISTRICT" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "AREA" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "EMAIL" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "LICENSE_NO" VARCHAR2(50 BYTE) VISIBLE,
  "DESCRIPTION" VARCHAR2(200 BYTE) VISIBLE,
  "PASSWORD" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "STATUS" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "TERMS_AND_CONDITIONS" VARCHAR2(3000 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for BANK_USER_APPOINTMENTS
-- ----------------------------
DROP TABLE "BB"."BANK_USER_APPOINTMENTS";
CREATE TABLE "BB"."BANK_USER_APPOINTMENTS" (
  "REQUESTID" NUMBER VISIBLE NOT NULL,
  "BANKID" NUMBER VISIBLE NOT NULL,
  "TIME" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "QUANTITY" NUMBER VISIBLE,
  "STATUS" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "USER_RATING" NUMBER VISIBLE,
  "USER_REVIEW" VARCHAR2(200 BYTE) VISIBLE,
  "BANK_RATING" NUMBER VISIBLE,
  "BANK_REVIEW" VARCHAR2(200 BYTE) VISIBLE,
  "APPOINTMENT_DATE" DATE VISIBLE,
  "DESCRIPTION" VARCHAR2(500 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for BLOOD_BANK
-- ----------------------------
DROP TABLE "BB"."BLOOD_BANK";
CREATE TABLE "BB"."BLOOD_BANK" (
  "BANKID" NUMBER VISIBLE DEFAULT "BB"."SEQ_BLOOD_BANK"."NEXTVAL" NOT NULL,
  "REQUESTID" NUMBER VISIBLE,
  "PHOTO" VARCHAR2(500 BYTE) VISIBLE,
  "SLOGAN" VARCHAR2(300 BYTE) VISIBLE,
  "PHONE" VARCHAR2(20 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for BLOOD_BANK_INFO
-- ----------------------------
DROP TABLE "BB"."BLOOD_BANK_INFO";
CREATE TABLE "BB"."BLOOD_BANK_INFO" (
  "BANKID" NUMBER VISIBLE NOT NULL,
  "BLOOD_GROUP" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "RH" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "QUANTITY" NUMBER VISIBLE NOT NULL,
  "CAPACITY" NUMBER VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for BLOOD_REQUEST
-- ----------------------------
DROP TABLE "BB"."BLOOD_REQUEST";
CREATE TABLE "BB"."BLOOD_REQUEST" (
  "REQUESTID" NUMBER VISIBLE NOT NULL,
  "USERID" NUMBER VISIBLE NOT NULL,
  "BLOOD_GROUP" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "RH" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "QUANTITY" NUMBER VISIBLE NOT NULL,
  "DISTRICT" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "AREA" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "DOCUMENT" VARCHAR2(500 BYTE) VISIBLE,
  "REQUEST_DATE" DATE VISIBLE,
  "DESCRIPTION" VARCHAR2(500 BYTE) VISIBLE,
  "HEALTH_CARE_CENTER" VARCHAR2(50 BYTE) VISIBLE,
  "PHONE_NUMBER" VARCHAR2(20 BYTE) VISIBLE,
  "REQUEST_TO" VARCHAR2(20 BYTE) VISIBLE,
  "REQUIRED_DATE" DATE VISIBLE,
  "REQUIRED_TIME" VARCHAR2(20 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for CANCELED_APPOINTMENTS
-- ----------------------------
DROP TABLE "BB"."CANCELED_APPOINTMENTS";
CREATE TABLE "BB"."CANCELED_APPOINTMENTS" (
  "ID" NUMBER VISIBLE DEFAULT "BB"."SEQ_CANCEL_REQUEST"."NEXTVAL" NOT NULL,
  "DONORID" VARCHAR2(50 BYTE) VISIBLE,
  "USERID" NUMBER VISIBLE,
  "BANKID" NUMBER VISIBLE,
  "BANK_DONOR_DONATIONID" NUMBER VISIBLE,
  "BANK_USER_REQUESTID" NUMBER VISIBLE,
  "BANK_USER_REQUEST_BANKID" NUMBER VISIBLE,
  "DONOR_USER_REQUESTID" NUMBER VISIBLE,
  "DONOR_USER_REQUEST_DONORID" VARCHAR2(50 BYTE) VISIBLE,
  "DESCRIPTION" VARCHAR2(200 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for DONOR
-- ----------------------------
DROP TABLE "BB"."DONOR";
CREATE TABLE "BB"."DONOR" (
  "DONORID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "GENDER" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "BIRTH_DATE" DATE VISIBLE DEFAULT SYSDATE NOT NULL,
  "AREA" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "DISTRICT" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "LAST_DONATION_DATE" DATE VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for DONOR_BLOOD_INFO
-- ----------------------------
DROP TABLE "BB"."DONOR_BLOOD_INFO";
CREATE TABLE "BB"."DONOR_BLOOD_INFO" (
  "DONORID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "BLOOD_GROUP" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "RH" VARCHAR2(10 BYTE) VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for DONOR_DONATES
-- ----------------------------
DROP TABLE "BB"."DONOR_DONATES";
CREATE TABLE "BB"."DONOR_DONATES" (
  "DONORID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "DONATIONID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for DONOR_MOBILE_NUMBER
-- ----------------------------
DROP TABLE "BB"."DONOR_MOBILE_NUMBER";
CREATE TABLE "BB"."DONOR_MOBILE_NUMBER" (
  "DONORID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "MOBILE_NUMBER" VARCHAR2(50 BYTE) VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for DONOR_USER_APPOINTMENTS
-- ----------------------------
DROP TABLE "BB"."DONOR_USER_APPOINTMENTS";
CREATE TABLE "BB"."DONOR_USER_APPOINTMENTS" (
  "REQUESTID" NUMBER VISIBLE NOT NULL,
  "DONORID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "STATUS" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
  "USER_RATING" NUMBER VISIBLE,
  "USER_REVIEW" VARCHAR2(200 BYTE) VISIBLE,
  "DONOR_RATING" NUMBER VISIBLE,
  "DONOR_REVIEW" VARCHAR2(200 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for LOG_TABLE
-- ----------------------------
DROP TABLE "BB"."LOG_TABLE";
CREATE TABLE "BB"."LOG_TABLE" (
  "ID" NUMBER VISIBLE DEFAULT "BB"."LOG_TABLE_SEQ"."NEXTVAL" NOT NULL,
  "FUNCTION_NAME" VARCHAR2(100 BYTE) VISIBLE,
  "PROCEDURE_NAME" VARCHAR2(100 BYTE) VISIBLE,
  "USERID" NUMBER VISIBLE,
  "BANKID" NUMBER VISIBLE,
  "PARAMETERS" VARCHAR2(300 BYTE) VISIBLE,
  "DATE_N_TIME" DATE VISIBLE,
  "DONORID" VARCHAR2(50 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for USERS
-- ----------------------------
DROP TABLE "BB"."USERS";
CREATE TABLE "BB"."USERS" (
  "USERID" NUMBER VISIBLE NOT NULL,
  "NAME" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "EMAIL" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "PASSWORD" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "PHOTO" VARCHAR2(500 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for USER_DONOR
-- ----------------------------
DROP TABLE "BB"."USER_DONOR";
CREATE TABLE "BB"."USER_DONOR" (
  "USERID" NUMBER VISIBLE NOT NULL,
  "DONORID" VARCHAR2(50 BYTE) VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for USER_QNA
-- ----------------------------
DROP TABLE "BB"."USER_QNA";
CREATE TABLE "BB"."USER_QNA" (
  "USERID" NUMBER VISIBLE,
  "QNAID" NUMBER VISIBLE NOT NULL,
  "QUESTION" VARCHAR2(200 BYTE) VISIBLE NOT NULL,
  "PHOTO" VARCHAR2(500 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for USER_QNA_ANSWER
-- ----------------------------
DROP TABLE "BB"."USER_QNA_ANSWER";
CREATE TABLE "BB"."USER_QNA_ANSWER" (
  "QNAID" NUMBER VISIBLE NOT NULL,
  "ANSWER" VARCHAR2(400 BYTE) VISIBLE NOT NULL,
  "USERID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for USER_REPORTS_DONOR
-- ----------------------------
DROP TABLE "BB"."USER_REPORTS_DONOR";
CREATE TABLE "BB"."USER_REPORTS_DONOR" (
  "REQUESTID" NUMBER VISIBLE NOT NULL,
  "DONORID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "ISSUE" VARCHAR2(100 BYTE) VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for USER_REQUEST
-- ----------------------------
DROP TABLE "BB"."USER_REQUEST";
CREATE TABLE "BB"."USER_REQUEST" (
  "USERID" NUMBER VISIBLE NOT NULL,
  "REQUESTID" NUMBER VISIBLE NOT NULL
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for WARNED_DONORS
-- ----------------------------
DROP TABLE "BB"."WARNED_DONORS";
CREATE TABLE "BB"."WARNED_DONORS" (
  "ID" NUMBER VISIBLE DEFAULT "BB"."WARNED_DONORS_SEQ"."NEXTVAL" NOT NULL,
  "DONORID" VARCHAR2(50 BYTE) VISIBLE,
  "DESCRIPTION" VARCHAR2(1000 BYTE) VISIBLE,
  "WARNING_DATE" DATE VISIBLE
)
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Function structure for CHECK_APPOINTMENTS_QUANTITY
-- ----------------------------
CREATE OR REPLACE
FUNCTION "BB"."CHECK_APPOINTMENTS_QUANTITY" AS
BEGIN
    -- Get the requested quantity from the BLOODREQUEST table
    SELECT SUM(QUANTITY)
    INTO v_requested_quantity
    FROM BLOOD_REQUEST
    WHERE USERID = userid_in;

    -- Get the number of appointments from the DONOR_USER_APPOINTMENTS table
    SELECT COUNT(*)
    INTO v_appointments_quantity
    FROM DONOR_USER_APPOINTMENTS
    WHERE REQUESTID IN (SELECT REQUESTID FROM BLOOD_REQUEST WHERE USERID = userid_in);

    -- Check if the quantities match
    IF v_requested_quantity = v_appointments_quantity THEN
        RETURN 0; -- Quantities match
    ELSE
        RETURN 1; -- Quantities do not match
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0; -- If no data found, return 1 indicating no match
END check_appointments_quantity;
/

-- ----------------------------
-- Function structure for GET_BLOOD_BANK_INFO
-- ----------------------------
CREATE OR REPLACE
PROCEDURE "BB"."GET_BLOOD_BANK_INFO" AS
BEGIN
    -- Initialize output parameters
    GET_TOTAL := 0;
    GET_RATING := 0;
    GET_BANK_NAME := NULL;
    GET_AREA := NULL;
    GET_DISTRICT := NULL;
    GET_DESCRIPTION := NULL; 

    -- Retrieve bank information
    SELECT NAME, DISTRICT, AREA, DESCRIPTION
    INTO GET_BANK_NAME, GET_DISTRICT, GET_AREA, GET_DESCRIPTION
    FROM BANK_SIGNUP_REQEUSTS
    WHERE REQUESTID = GET_REQUESTID;

    -- Retrieve total count and average rating
    SELECT COUNT(*), TRUNC(AVG(B.BANK_RATING), 0) 
    INTO GET_TOTAL, GET_RATING
    FROM BANK_USER_APPOINTMENTS B
    WHERE B.BANKID = (
            SELECT BANKID
            FROM BLOOD_BANK
            WHERE REQUESTID = GET_REQUESTID
        )
        AND B.STATUS = 'ENDED'
    GROUP BY B.BANKID;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Handle no data found scenario
        DBMS_OUTPUT.PUT_LINE('No data found for the given request ID');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

-- ----------------------------
-- Function structure for GET_BLOOD_GROUP_OF_DONOR
-- ----------------------------
CREATE OR REPLACE
FUNCTION "BB"."GET_BLOOD_GROUP_OF_DONOR" AS
BEGIN
	ISIN := 0;
	SELECT COUNT(*) INTO ISIN
	FROM DONOR_BLOOD_INFO D1
	WHERE D1.DONORID = ID;
	
	IF ISIN = 1 THEN
		SELECT BLOOD_GROUP INTO BG
		FROM DONOR_BLOOD_INFO D
		WHERE D.DONORID = ID;
	ELSE 
			BG := 'INVALID';
	END IF;
	RETURN BG;
			
END;
/

-- ----------------------------
-- Function structure for GET_DONOR_APPOINTMENT_INFO_FROM_DONATIONID
-- ----------------------------
CREATE OR REPLACE
PROCEDURE "BB"."GET_DONOR_APPOINTMENT_INFO_FROM_DONATIONID" AS
BEGIN
    GET_BLOOD_GROUP := NULL;
    GET_RH := NULL;
    GET_NAME := NULL;
    GET_AREA := NULL;
    GET_DISTRICT := NULL;
    GET_MOBILE1 := NULL;
    GET_MOBILE2 := NULL;
    GET_DONATION_DATE := NULL;
    GET_TIME := NULL;
    GET_DONORID := NULL;

    SELECT T1.TIME, T1.DONATION_DATE, T1.DONORID
    INTO GET_TIME, GET_DONATION_DATE, GET_DONORID
    FROM BANK_DONOR_APPOINTMENTS T1
    WHERE T1.DONATIONID = GET_DONATIONID;

    GET_MOBILE1_AND_MOBILE2_OF_DONOR(GET_DONORID, GET_MOBILE1, GET_MOBILE2);
    GET_NAME_AND_ADDRESS_OF_DONOR(GET_DONORID, GET_NAME, GET_AREA, GET_DISTRICT);
    GET_RH := GET_RH_OF_DONOR(GET_DONORID);
    GET_BLOOD_GROUP := GET_BLOOD_GROUP_OF_DONOR(GET_DONORID);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found for the given donation ID');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

-- ----------------------------
-- Function structure for GET_DONOR_INFO
-- ----------------------------
CREATE OR REPLACE
PROCEDURE "BB"."GET_DONOR_INFO" AS
BEGIN
    -- Initialize output parameters
    GET_TOTAL := 0;
    GET_RATING := 0;
    GET_NAME := NULL;
    GET_BLOOD_GROUP := NULL;
    GET_RH := NULL;
    GET_LAST_DONATION_DATE := NULL;
    GET_AREA := NULL;
    GET_DISTRICT := NULL;
    GET_PHONE := NULL;
    GET_PHONE2 := NULL;
    GET_GENDER := NULL;
    GET_AGE := 0;
    GET_DONORID := NULL;

    -- Retrieve user ID
    SELECT UR.USERID INTO USER_ID
    FROM USER_REQUEST UR
    WHERE UR.REQUESTID = GET_REQUESTID;

    -- Log the procedure call
    INSERT INTO LOG_TABLE (PROCEDURE_NAME, USERID, PARAMETERS, DATE_N_TIME)
    VALUES ('GET_DONOR_INFO', USER_ID, 'REQUEST_ID: ' || GET_REQUESTID, SYSDATE);

    -- Retrieve donor ID
    SELECT DONORID INTO GET_DONORID
    FROM DONOR_USER_APPOINTMENTS 
    WHERE REQUESTID = GET_REQUESTID;

    -- Retrieve donor phone numbers
    GET_MOBILE1_AND_MOBILE2_OF_DONOR(GET_DONORID, GET_PHONE, GET_PHONE2);

    -- Retrieve donor name and address details
    GET_NAME_AND_ADDRESS_OF_DONOR(GET_DONORID, GET_NAME, GET_AREA, GET_DISTRICT);

    -- Retrieve donor RH and blood group
    GET_RH := GET_RH_OF_DONOR(GET_DONORID);
    GET_BLOOD_GROUP := GET_BLOOD_GROUP_OF_DONOR(GET_DONORID);

    -- Retrieve total count and average rating from BANK_DONOR_APPOINTMENTS
    SELECT COUNT(*), TRUNC(AVG(BD.DONOR_RATING), 0)
    INTO GET_COUNTFROM_BD_APPOINTMENT, GET_RATINGFROM_BD_APPOINTMENT
    FROM BANK_DONOR_APPOINTMENTS BD
    WHERE BD.DONORID = GET_DONORID
    AND BD.STATUS = 'ENDED';

    -- Retrieve total count and average rating from DONOR_USER_APPOINTMENTS
    SELECT COUNT(*), TRUNC(AVG(BD.DONOR_RATING), 0)
    INTO GET_COUNTFROM_DU_APPOINTMENT, GET_RATINGFROM_DU_APPOINTMENT
    FROM DONOR_USER_APPOINTMENTS BD
    WHERE BD.DONORID = GET_DONORID
    AND BD.STATUS = 'ENDED';

    -- Calculate total and average rating
    GET_RATING := (GET_RATINGFROM_BD_APPOINTMENT + GET_RATINGFROM_DU_APPOINTMENT) / 2;
    GET_TOTAL := GET_COUNTFROM_BD_APPOINTMENT + GET_COUNTFROM_DU_APPOINTMENT;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found for the given request ID');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

-- ----------------------------
-- Function structure for GET_MOBILE1_AND_MOBILE2_OF_DONOR
-- ----------------------------
CREATE OR REPLACE
PROCEDURE "BB"."GET_MOBILE1_AND_MOBILE2_OF_DONOR" AS
BEGIN
	ISIN := 0;
	I := 1;
	
	SELECT COUNT(*) INTO ISIN
	FROM DONOR D1
	WHERE D1.DONORID = ID;
	
	IF ISIN = 1 THEN
		GOT_MOBILE1 := 'NOT_FOUND';
		GOT_MOBILE2 := 'NOT_FOUND';
		FOR R IN(SELECT MOBILE_NUMBER FROM DONOR_MOBILE_NUMBER T1 WHERE T1.DONORID = ID)
			LOOP
				IF I = 1 THEN 
					GOT_MOBILE1 := R.MOBILE_NUMBER;
				ELSIF I = 2 THEN
					GOT_MOBILE2 := R.MOBILE_NUMBER;
				END IF;
				I := I + 1;	
			END LOOP;
	ELSE 
			GOT_MOBILE1 := 'INVALID';
			GOT_MOBILE2 := 'INVALID';
	END IF;
	MOBILE1 := GOT_MOBILE1;
	MOBILE2 := GOT_MOBILE2;
END;
/

-- ----------------------------
-- Function structure for GET_NAME_AND_ADDRESS_OF_DONOR
-- ----------------------------
CREATE OR REPLACE
PROCEDURE "BB"."GET_NAME_AND_ADDRESS_OF_DONOR" AS
BEGIN
	ISIN := 0;
	SELECT COUNT(*) INTO ISIN
	FROM DONOR D1
	WHERE D1.DONORID = ID;
	
	IF ISIN = 1 THEN
		SELECT U1.NAME INTO GOT_NAME
		FROM DONOR D2 JOIN USER_DONOR UD1 ON D2.DONORID = UD1.DONORID JOIN USERS U1 ON U1.USERID = UD1.USERID
		WHERE D2.DONORID = ID;
		
		SELECT D3.AREA INTO GOT_AREA
		FROM DONOR D3
		WHERE D3.DONORID = ID; 
		
		SELECT D4.DISTRICT INTO GOT_DISTRICT
		FROM DONOR D4
		WHERE D4.DONORID = ID;
		
		NAME := GOT_NAME;
		AREA := GOT_AREA;
		DISTRICT := GOT_DISTRICT;
	ELSE 
		NAME := 'INVALID';
		AREA := 'INVALID';
		DISTRICT := 'INVALID';
	END IF;
END;
/

-- ----------------------------
-- Function structure for GET_REQUEST_DATE_USER
-- ----------------------------
CREATE OR REPLACE
PROCEDURE "BB"."GET_REQUEST_DATE_USER" AS
BEGIN
    -- Initialize output parameters
    GET_FIRST := NULL;
    GET_SECOND := NULL;

    -- Query to fetch the first two request dates for the specified user ID
    SELECT REQUEST_DATE
    INTO GET_FIRST
    FROM (
        SELECT REQUEST_DATE
        FROM BLOOD_REQUEST
        WHERE USERID = GET_USERID AND REQUEST_TO = 'DONOR'
        ORDER BY REQUEST_DATE DESC
    )
    WHERE ROWNUM = 1;

    SELECT REQUEST_DATE
INTO GET_SECOND
FROM (
    SELECT REQUEST_DATE, 
           ROW_NUMBER() OVER (ORDER BY REQUEST_DATE DESC) AS rn
    FROM BLOOD_REQUEST
    WHERE USERID = GET_USERID AND REQUEST_TO = 'DONOR'
)
WHERE rn = 2;


EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Handle no data found scenario
        DBMS_OUTPUT.PUT_LINE('No data found for the given request ID');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

-- ----------------------------
-- Function structure for GET_RH_OF_DONOR
-- ----------------------------
CREATE OR REPLACE
FUNCTION "BB"."GET_RH_OF_DONOR" AS
BEGIN
	ISIN := 0;
	SELECT COUNT(*) INTO ISIN
	FROM DONOR_BLOOD_INFO D1
	WHERE D1.DONORID = ID;
	
	IF ISIN = 1 THEN
		SELECT RH INTO BG
		FROM DONOR_BLOOD_INFO D
		WHERE D.DONORID = ID;
	ELSE 
			BG := 'INVALID';
	END IF;
	RETURN BG;
			
END;
/

-- ----------------------------
-- Sequence structure for LOG_TABLE_SEQ
-- ----------------------------
DROP SEQUENCE "BB"."LOG_TABLE_SEQ";
CREATE SEQUENCE "BB"."LOG_TABLE_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_BANK_SIGNUP_REQUESTS
-- ----------------------------
DROP SEQUENCE "BB"."SEQ_BANK_SIGNUP_REQUESTS";
CREATE SEQUENCE "BB"."SEQ_BANK_SIGNUP_REQUESTS" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_BLOOD_BANK
-- ----------------------------
DROP SEQUENCE "BB"."SEQ_BLOOD_BANK";
CREATE SEQUENCE "BB"."SEQ_BLOOD_BANK" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 NOCACHE;

-- ----------------------------
-- Sequence structure for SEQ_CANCEL_REQUEST
-- ----------------------------
DROP SEQUENCE "BB"."SEQ_CANCEL_REQUEST";
CREATE SEQUENCE "BB"."SEQ_CANCEL_REQUEST" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for USERS_ID_SEQ
-- ----------------------------
DROP SEQUENCE "BB"."USERS_ID_SEQ";
CREATE SEQUENCE "BB"."USERS_ID_SEQ" MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_ID_SEQ
-- ----------------------------
DROP SEQUENCE "BB"."USER_ID_SEQ";
CREATE SEQUENCE "BB"."USER_ID_SEQ" MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for USER_QNA_SEQ
-- ----------------------------
DROP SEQUENCE "BB"."USER_QNA_SEQ";
CREATE SEQUENCE "BB"."USER_QNA_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for WARNED_DONORS_SEQ
-- ----------------------------
DROP SEQUENCE "BB"."WARNED_DONORS_SEQ";
CREATE SEQUENCE "BB"."WARNED_DONORS_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Primary Key structure for table BANK_DONOR_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "BANK_DONOR_APPOINTMENTS_PK" PRIMARY KEY ("DONATIONID");

-- ----------------------------
-- Checks structure for table BANK_DONOR_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "BANK_DONOR_STATUS_CONSTRAINT" CHECK (
    STATUS IN ('PENDING', 'ACCEPTED', 'REJECTED', 'SUCCESSFUL', 'CANCELED','ENDED')
) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C007564" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C007566" CHECK ("TIME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C007567" CHECK ("STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008148" CHECK ("DONATIONID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008149" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008150" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008151" CHECK ("DONATION_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008152" CHECK ("TIME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008153" CHECK ("STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008539" CHECK ("DONATIONID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008540" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008541" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008542" CHECK ("DONATION_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008543" CHECK ("TIME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C008544" CHECK ("STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C017563" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "SYS_C017565" CHECK ("DONATION_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table BANK_DONOR_APPOINTMENTS
-- ----------------------------
CREATE TRIGGER "BB"."ADD_BLOOD_STOCK" AFTER UPDATE OF "STATUS" ON "BB"."BANK_DONOR_APPOINTMENTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    BANK_ID NUMBER;
    DONOR_ID VARCHAR2(50);
    DONOR_BG VARCHAR2(10);
    DONOR_RH VARCHAR2(10);
    VALID_TYPE NUMBER := 0;
BEGIN
    IF :NEW.STATUS = 'ACCEPTED' THEN
        BANK_ID := :OLD.BANKID; 
        DONOR_ID := :OLD.DONORID;
        DONOR_BG := GET_BLOOD_GROUP_OF_DONOR(DONOR_ID);
        DONOR_RH := GET_RH_OF_DONOR(DONOR_ID);
        

        IF NOT (DONOR_RH = 'INVALID') AND NOT (DONOR_BG = 'INVALID') THEN
            FOR R IN (SELECT BLOOD_GROUP, RH FROM BLOOD_BANK_INFO WHERE BANKID = BANK_ID) LOOP
                IF R.BLOOD_GROUP = DONOR_BG AND R.RH = DONOR_RH THEN
                    VALID_TYPE := 1;
                END IF;
            END LOOP;
        END IF;


        IF VALID_TYPE = 0 THEN
            INSERT INTO BLOOD_BANK_INFO (BANKID, BLOOD_GROUP, RH, QUANTITY, CAPACITY)
            VALUES (BANK_ID, DONOR_BG, DONOR_RH, 0, 100);
        END IF;
    END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table BANK_REPORTS_DONOR
-- ----------------------------
ALTER TABLE "BB"."BANK_REPORTS_DONOR" ADD CONSTRAINT "BANK_REPORTS_DONOR_PK" PRIMARY KEY ("DONATIONID", "ISSUE");

-- ----------------------------
-- Checks structure for table BANK_REPORTS_DONOR
-- ----------------------------
ALTER TABLE "BB"."BANK_REPORTS_DONOR" ADD CONSTRAINT "BANK_REPORTS_DONOR_STATUS_CHECK" CHECK (STATUS IN ('MANAGED', 'NOT_MANAGED')) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table BANK_REPORTS_DONOR
-- ----------------------------
CREATE TRIGGER "BB"."BANK_REPORTS_DONOR_TRIGGER" AFTER INSERT ON "BB"."BANK_REPORTS_DONOR" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
BANK_ID NUMBER;
BEGIN

UPDATE BANK_DONOR_APPOINTMENTS
SET STATUS = 'CANCELED'
WHERE DONATIONID = :NEW.DONATIONID;

SELECT BANKID INTO BANK_ID
FROM BANK_DONOR_APPOINTMENTS T1
WHERE T1.DONATIONID = :NEW.DONATIONID; 

INSERT INTO CANCELED_APPOINTMENTS(BANKID,BANK_DONOR_DONATIONID,DESCRIPTION)
VALUES(BANK_ID,:NEW.DONATIONID,:NEW.ISSUE);

END;
/

-- ----------------------------
-- Primary Key structure for table BANK_SIGNUP_REQEUSTS
-- ----------------------------
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "BANK_SIGNUP_REQUESTS_PK" PRIMARY KEY ("REQUESTID");

-- ----------------------------
-- Uniques structure for table BANK_SIGNUP_REQEUSTS
-- ----------------------------
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "BANK_SIGNUP_REQUEST_UNIQUE_EMAIL" UNIQUE ("EMAIL") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "BANK_SIGNUP_REQUEST_UNIQUE_LICENSE" UNIQUE ("LICENSE_NO") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY DISABLE NOVALIDATE;
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "BANK_SIGNUP_REQUEST_UNIQUE_NAME_DISTRICT_AREA" UNIQUE ("NAME", "DISTRICT", "AREA") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY DISABLE NOVALIDATE;

-- ----------------------------
-- Checks structure for table BANK_SIGNUP_REQEUSTS
-- ----------------------------
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "BANK_SIGNUP_REQEUSTS_STATUS_CHK" CHECK (STATUS IN ('PENDING','ACCEPTED','REJECTED')) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "SYS_C008734" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "SYS_C008735" CHECK ("DISTRICT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "SYS_C008736" CHECK ("AREA" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "SYS_C008737" CHECK ("EMAIL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "SYS_C008739" CHECK ("PASSWORD" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_SIGNUP_REQEUSTS" ADD CONSTRAINT "SYS_C008740" CHECK ("STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table BANK_USER_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "BANK_USER_APPOINTMENTS_PK" PRIMARY KEY ("REQUESTID", "BANKID");

-- ----------------------------
-- Checks structure for table BANK_USER_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "BANK_USER_APPOINTMENTS_CHECK_STATUS" CHECK (
STATUS IN ('PENDING', 'ACCEPTED', 'REJECTED', 'SUCCESSFUL', 'CANCELED','ENDED') 
) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C007583" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C007585" CHECK ("TIME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C007586" CHECK ("QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C007587" CHECK ("STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008154" CHECK ("REQUESTID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008156" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008158" CHECK ("TIME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008159" CHECK ("QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008160" CHECK ("STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008545" CHECK ("REQUESTID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008547" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008549" CHECK ("TIME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008551" CHECK ("STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table BANK_USER_APPOINTMENTS
-- ----------------------------
CREATE TRIGGER "BB"."BLOOD_STOCK_CHECK_BEFORE_ACCEPTING_USER_APPOINTMENT" BEFORE UPDATE OF "STATUS" ON "BB"."BANK_USER_APPOINTMENTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    BANK_ID NUMBER;
    BG VARCHAR2(10);
    RRH VARCHAR2(10);
    REQ_ID NUMBER;
    GIVEN_QUANTITY NUMBER;
    TERMINATE NUMBER := 1;
BEGIN
    --DBMS_OUTPUT.PUT_LINE('THIS IS A TRIGGER');
    IF :NEW.STATUS = 'ACCEPTED' THEN
        REQ_ID := :OLD.REQUESTID;
        GIVEN_QUANTITY := :NEW.QUANTITY;

        SELECT BR1.BLOOD_GROUP, BR1.RH INTO BG, RRH 
        FROM BLOOD_REQUEST BR1
        WHERE BR1.REQUESTID = REQ_ID;
                
        --DBMS_OUTPUT.PUT_LINE(BG || ' ' || RH || ' ' || GIVEN_QUANTITY);

        FOR R IN (SELECT BLOOD_GROUP, RH, QUANTITY FROM BLOOD_BANK_INFO WHERE BANKID = :OLD.BANKID) LOOP
            --DBMS_OUTPUT.PUT_LINE(R.BLOOD_GROUP || ' '||R.RH || ' '||R.QUANTITY);
            IF R.BLOOD_GROUP = BG AND R.RH = RRH AND R.QUANTITY >= GIVEN_QUANTITY THEN
                --DBMS_OUTPUT.PUT_LINE('TRUE FOR THIS ONE');
                TERMINATE := 0; 
            END IF;
        END LOOP;
        IF TERMINATE = 1 THEN
            RAISE_APPLICATION_ERROR(-20001, 'Insufficient amount present in stock');
        END IF;
    END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table BLOOD_BANK
-- ----------------------------
ALTER TABLE "BB"."BLOOD_BANK" ADD CONSTRAINT "BLOOD_BANK_PK" PRIMARY KEY ("BANKID");

-- ----------------------------
-- Checks structure for table BLOOD_BANK
-- ----------------------------
ALTER TABLE "BB"."BLOOD_BANK" ADD CONSTRAINT "SYS_C008161" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table BLOOD_BANK_INFO
-- ----------------------------
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "BLOOD_BANK_INFO_PK" PRIMARY KEY ("BANKID", "BLOOD_GROUP", "RH");

-- ----------------------------
-- Checks structure for table BLOOD_BANK_INFO
-- ----------------------------
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "BLOOD_BANK_INFO_CHK1" CHECK (QUANTITY<=CAPACITY) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "DONOR_BLOOD_INFO_CHK2" CHECK ( CAPACITY > 50 AND CAPACITY < 10000 ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C007556" CHECK ("BLOOD_GROUP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C007557" CHECK ("RH" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C007558" CHECK ("QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C008166" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C008167" CHECK ("BLOOD_GROUP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C008168" CHECK ("RH" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C008169" CHECK ("QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C008552" CHECK ("BANKID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C008553" CHECK ("BLOOD_GROUP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C008554" CHECK ("RH" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "SYS_C008555" CHECK ("QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table BLOOD_BANK_INFO
-- ----------------------------
CREATE TRIGGER "BB"."INVOKE_DELETION_FROM_BLOOD_BANK_INFO" BEFORE DELETE ON "BB"."BLOOD_BANK_INFO" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE 
    BG VARCHAR2(10);
    RRH VARCHAR2(10);
    COUNT1 NUMBER := 0;
    COUNT2 NUMBER := 0;
		COUNT3 NUMBER := 0;
BEGIN
    BG := :OLD.BLOOD_GROUP;
    RRH := :OLD.RH;

    SELECT COUNT(*) INTO COUNT1
    FROM BANK_DONOR_APPOINTMENTS T JOIN DONOR_BLOOD_INFO D ON T.DONORID = D.DONORID
    WHERE T.BANKID = :OLD.BANKID AND T.STATUS = 'ACCEPTED' 
    AND D.BLOOD_GROUP = BG AND D.RH = RRH;

    SELECT COUNT(*) INTO COUNT2
    FROM BANK_USER_APPOINTMENTS T1 
    JOIN BLOOD_REQUEST T2 ON T1.REQUESTID = T2.REQUESTID 
    WHERE T1.BANKID = :OLD.BANKID AND T1.STATUS = 'ACCEPTED' 
    AND T2.BLOOD_GROUP = BG AND T2.RH = RRH;
		
		COUNT3 := COUNT1 + COUNT2;
		
    IF COUNT3 > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot delete blood type with accepted appointments');
    END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table BLOOD_REQUEST
-- ----------------------------
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "BLOOD_REQUEST_PK" PRIMARY KEY ("REQUESTID");

-- ----------------------------
-- Checks structure for table BLOOD_REQUEST
-- ----------------------------
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C007572" CHECK ("BLOOD_GROUP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C007573" CHECK ("RH" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C007575" CHECK ("QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C007576" CHECK ("DISTRICT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C007577" CHECK ("AREA" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C007580" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C008170" CHECK ("REQUESTID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C008171" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C008172" CHECK ("BLOOD_GROUP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C008173" CHECK ("RH" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C008175" CHECK ("QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C008176" CHECK ("DISTRICT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "SYS_C008177" CHECK ("AREA" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table CANCELED_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CANCELED_APPOINTMENTS_PK" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table CANCELED_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CHK_3" CHECK (
            (DONOR_USER_REQUESTID IS NOT NULL AND DONOR_USER_REQUEST_DONORID IS NOT NULL) OR
            (DONOR_USER_REQUESTID IS NULL AND DONOR_USER_REQUEST_DONORID IS NULL)
        ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CHK_4" CHECK (
            (BANK_USER_REQUESTID IS NOT NULL AND BANK_USER_REQUEST_BANKID IS NOT NULL) OR
            (BANK_USER_REQUESTID IS NULL AND BANK_USER_REQUEST_BANKID IS NULL)
        ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CHK_DONATIONID_REQUESTID" CHECK (
            (BANK_DONOR_DONATIONID IS NOT NULL AND BANK_USER_REQUESTID IS NULL AND DONOR_USER_REQUESTID IS NULL) OR
            (BANK_DONOR_DONATIONID IS NULL AND BANK_USER_REQUESTID IS NOT NULL AND DONOR_USER_REQUESTID IS NULL) OR
            (BANK_DONOR_DONATIONID IS NULL AND BANK_USER_REQUESTID IS NULL AND DONOR_USER_REQUESTID IS NOT NULL)
        ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CHK_DONORID_USERID_BANKID" CHECK (
            (DONORID IS NOT NULL AND USERID IS NULL AND BANKID IS NULL) OR
            (DONORID IS NULL AND USERID IS NOT NULL AND BANKID IS NULL) OR
            (DONORID IS NULL AND USERID IS NULL AND BANKID IS NOT NULL)
        ) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table CANCELED_APPOINTMENTS
-- ----------------------------
CREATE TRIGGER "BB"."BANK_DONOR_USER_CANCELLATIONS" AFTER INSERT ON "BB"."CANCELED_APPOINTMENTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
    STATUSS VARCHAR2(15);
    DONATION_ID NUMBER;
    REQUEST_ID NUMBER; 
    DONOR_ID VARCHAR2(100);
    BANK_ID NUMBER;
BEGIN
    BANK_ID := :NEW.BANK_USER_REQUEST_BANKID;
    DONATION_ID := :NEW.BANK_DONOR_DONATIONID;
    REQUEST_ID := :NEW.DONOR_USER_REQUESTID;
    STATUSS := 'CANCELED';
    DONOR_ID := :NEW.DONOR_USER_REQUEST_DONORID;

    IF DONATION_ID IS NOT NULL THEN
        UPDATE BANK_DONOR_APPOINTMENTS 
        SET STATUS = STATUSS
        WHERE DONATIONID = DONATION_ID;
    ELSIF BANK_ID IS NOT NULL THEN
        UPDATE BANK_USER_APPOINTMENTS 
        SET STATUS = STATUSS
        WHERE REQUESTID = :NEW.BANK_USER_REQUESTID AND BANKID=BANK_ID;
    ELSE 
        UPDATE DONOR_USER_APPOINTMENTS
        SET STATUS = STATUSS
        WHERE REQUESTID = REQUEST_ID AND DONORID = DONOR_ID;
    END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table DONOR
-- ----------------------------
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C007545" PRIMARY KEY ("DONORID");

-- ----------------------------
-- Checks structure for table DONOR
-- ----------------------------
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C007508" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C007540" CHECK ("GENDER" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C007541" CHECK ("BIRTH_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C007542" CHECK ("AREA" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C007543" CHECK ("DISTRICT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C007544" CHECK ("LAST_DONATION_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY DISABLE NOVALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C007612" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C008100" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C008178" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C008179" CHECK ("GENDER" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C008180" CHECK ("BIRTH_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C008181" CHECK ("AREA" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "SYS_C008182" CHECK ("DISTRICT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table DONOR_BLOOD_INFO
-- ----------------------------
ALTER TABLE "BB"."DONOR_BLOOD_INFO" ADD CONSTRAINT "SYS_C008617" PRIMARY KEY ("DONORID");

-- ----------------------------
-- Checks structure for table DONOR_BLOOD_INFO
-- ----------------------------
ALTER TABLE "BB"."DONOR_BLOOD_INFO" ADD CONSTRAINT "SYS_C008556" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR_BLOOD_INFO" ADD CONSTRAINT "SYS_C008557" CHECK ("BLOOD_GROUP" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR_BLOOD_INFO" ADD CONSTRAINT "SYS_C008558" CHECK ("RH" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table DONOR_DONATES
-- ----------------------------
ALTER TABLE "BB"."DONOR_DONATES" ADD CONSTRAINT "SYS_C008605" PRIMARY KEY ("DONORID", "DONATIONID");

-- ----------------------------
-- Checks structure for table DONOR_DONATES
-- ----------------------------
ALTER TABLE "BB"."DONOR_DONATES" ADD CONSTRAINT "SYS_C008559" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR_DONATES" ADD CONSTRAINT "SYS_C008560" CHECK ("DONATIONID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table DONOR_MOBILE_NUMBER
-- ----------------------------
ALTER TABLE "BB"."DONOR_MOBILE_NUMBER" ADD CONSTRAINT "DONOR_MOBILE_NUMBER_PK" PRIMARY KEY ("DONORID", "MOBILE_NUMBER");

-- ----------------------------
-- Primary Key structure for table DONOR_USER_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."DONOR_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008613" PRIMARY KEY ("REQUESTID", "DONORID");

-- ----------------------------
-- Checks structure for table DONOR_USER_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."DONOR_USER_APPOINTMENTS" ADD CONSTRAINT "DONOR_USER_APPOINTMENTS_CHECK_STATUS" CHECK (
STATUS IN ('CANCELED','CONFIRMED','REPORTED', 'SUCCESSFUL', 'ENDEDBU','ENDEDBD')
) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008561" CHECK ("REQUESTID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008563" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR_USER_APPOINTMENTS" ADD CONSTRAINT "SYS_C008566" CHECK ("STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table DONOR_USER_APPOINTMENTS
-- ----------------------------
CREATE TRIGGER "BB"."LAST_DONATION_DATE_UPDATE" AFTER UPDATE OF "STATUS" ON "BB"."DONOR_USER_APPOINTMENTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE 
    GET_STATUS VARCHAR2(15);
BEGIN
    GET_STATUS := :NEW.STATUS;

    IF(GET_STATUS = 'SUCCESSFUL') THEN
       UPDATE DONOR
       SET LAST_DONATION_DATE= SYSDATE
       WHERE DONORID =:OLD.DONORID;

    END IF;
END;
/
CREATE TRIGGER "BB"."USER_REPORT_DONOR" AFTER UPDATE OF "STATUS" ON "BB"."DONOR_USER_APPOINTMENTS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE 
    GET_STATUS VARCHAR2(15);
BEGIN
    GET_STATUS := :NEW.STATUS;

    IF(GET_STATUS = 'REPORTED') THEN
        INSERT INTO USER_REPORTS_DONOR (REQUESTID, DONORID, ISSUE) VALUES (:OLD.REQUESTID, :OLD.DONORID, 'NOT PRESENT');
    END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table LOG_TABLE
-- ----------------------------
ALTER TABLE "BB"."LOG_TABLE" ADD CONSTRAINT "LOG_TABLE_PRIMARY_KEY" PRIMARY KEY ("ID");

-- ----------------------------
-- Primary Key structure for table USERS
-- ----------------------------
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "USER_ID" PRIMARY KEY ("USERID");

-- ----------------------------
-- Uniques structure for table USERS
-- ----------------------------
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007565" UNIQUE ("EMAIL") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table USERS
-- ----------------------------
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007512" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007513" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007514" CHECK ("PASSWORD" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007538" CHECK ("EMAIL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007562" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007563" CHECK ("PASSWORD" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007618" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007619" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007620" CHECK ("PASSWORD" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007705" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007706" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C007707" CHECK ("PASSWORD" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C008195" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C008196" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C008197" CHECK ("EMAIL" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USERS" ADD CONSTRAINT "SYS_C008198" CHECK ("PASSWORD" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table USER_DONOR
-- ----------------------------
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "SYS_C007588" PRIMARY KEY ("USERID");

-- ----------------------------
-- Uniques structure for table USER_DONOR
-- ----------------------------
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "SYS_C007589" UNIQUE ("DONORID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table USER_DONOR
-- ----------------------------
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "SYS_C007515" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "SYS_C007539" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "SYS_C007614" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "SYS_C008090" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "SYS_C008199" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "SYS_C008200" CHECK ("DONORID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table USER_QNA
-- ----------------------------
ALTER TABLE "BB"."USER_QNA" ADD CONSTRAINT "USER_QNA_PK" PRIMARY KEY ("QNAID");

-- ----------------------------
-- Checks structure for table USER_QNA
-- ----------------------------
ALTER TABLE "BB"."USER_QNA" ADD CONSTRAINT "SYS_C008639" CHECK ("QUESTION" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table USER_QNA_ANSWER
-- ----------------------------
ALTER TABLE "BB"."USER_QNA_ANSWER" ADD CONSTRAINT "USER_QNA_ANSWER_PK" PRIMARY KEY ("QNAID", "USERID");

-- ----------------------------
-- Checks structure for table USER_QNA_ANSWER
-- ----------------------------
ALTER TABLE "BB"."USER_QNA_ANSWER" ADD CONSTRAINT "SYS_C008642" CHECK ("ANSWER" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table USER_REPORTS_DONOR
-- ----------------------------
ALTER TABLE "BB"."USER_REPORTS_DONOR" ADD CONSTRAINT "USER_REPORTS_DONOR_PK" PRIMARY KEY ("REQUESTID", "DONORID");

-- ----------------------------
-- Primary Key structure for table USER_REQUEST
-- ----------------------------
ALTER TABLE "BB"."USER_REQUEST" ADD CONSTRAINT "USER_REQUEST_PK" PRIMARY KEY ("USERID", "REQUESTID");

-- ----------------------------
-- Checks structure for table USER_REQUEST
-- ----------------------------
ALTER TABLE "BB"."USER_REQUEST" ADD CONSTRAINT "SYS_C008201" CHECK ("USERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USER_REQUEST" ADD CONSTRAINT "SYS_C008202" CHECK ("REQUESTID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table WARNED_DONORS
-- ----------------------------
ALTER TABLE "BB"."WARNED_DONORS" ADD CONSTRAINT "WARNED_DONORS_PK" PRIMARY KEY ("ID");

-- ----------------------------
-- Foreign Keys structure for table BANK_DONOR_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "BANK_DONOR_APPOINTMENTS_FK1" FOREIGN KEY ("DONORID", "DONATIONID") REFERENCES "BB"."DONOR_DONATES" ("DONORID", "DONATIONID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_DONOR_APPOINTMENTS" ADD CONSTRAINT "BANK_DONOR_APPOINTMENTS_FK2" FOREIGN KEY ("BANKID") REFERENCES "BB"."BLOOD_BANK" ("BANKID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table BANK_REPORTS_DONOR
-- ----------------------------
ALTER TABLE "BB"."BANK_REPORTS_DONOR" ADD CONSTRAINT "BANK_REPORTS_DONOR_FK" FOREIGN KEY ("DONATIONID") REFERENCES "BB"."BANK_DONOR_APPOINTMENTS" ("DONATIONID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table BANK_USER_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "BANK_USER_APPOINTMENTS_FK1" FOREIGN KEY ("REQUESTID") REFERENCES "BB"."BLOOD_REQUEST" ("REQUESTID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."BANK_USER_APPOINTMENTS" ADD CONSTRAINT "BANK_USER_APPOINTMENTS_FK2" FOREIGN KEY ("BANKID") REFERENCES "BB"."BLOOD_BANK" ("BANKID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table BLOOD_BANK
-- ----------------------------
ALTER TABLE "BB"."BLOOD_BANK" ADD CONSTRAINT "BLOOD_BANK_FK" FOREIGN KEY ("REQUESTID") REFERENCES "BB"."BANK_SIGNUP_REQEUSTS" ("REQUESTID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table BLOOD_BANK_INFO
-- ----------------------------
ALTER TABLE "BB"."BLOOD_BANK_INFO" ADD CONSTRAINT "BLOOD_BANK_INFO_FK" FOREIGN KEY ("BANKID") REFERENCES "BB"."BLOOD_BANK" ("BANKID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table BLOOD_REQUEST
-- ----------------------------
ALTER TABLE "BB"."BLOOD_REQUEST" ADD CONSTRAINT "BLOOD_REQUEST_FK" FOREIGN KEY ("USERID", "REQUESTID") REFERENCES "BB"."USER_REQUEST" ("USERID", "REQUESTID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table CANCELED_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CANCELED_APPOINTMENTS_FK1" FOREIGN KEY ("DONORID") REFERENCES "BB"."DONOR" ("DONORID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CANCELED_APPOINTMENTS_FK2" FOREIGN KEY ("USERID") REFERENCES "BB"."USERS" ("USERID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CANCELED_APPOINTMENTS_FK3" FOREIGN KEY ("BANKID") REFERENCES "BB"."BLOOD_BANK" ("BANKID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CANCELED_APPOINTMENTS_FK4" FOREIGN KEY ("BANK_DONOR_DONATIONID") REFERENCES "BB"."BANK_DONOR_APPOINTMENTS" ("DONATIONID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CANCELED_APPOINTMENTS_FK5" FOREIGN KEY ("DONOR_USER_REQUESTID", "DONOR_USER_REQUEST_DONORID") REFERENCES "BB"."DONOR_USER_APPOINTMENTS" ("REQUESTID", "DONORID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."CANCELED_APPOINTMENTS" ADD CONSTRAINT "CANCELED_APPOINTMENTS_FK6" FOREIGN KEY ("BANK_USER_REQUESTID", "BANK_USER_REQUEST_BANKID") REFERENCES "BB"."BANK_USER_APPOINTMENTS" ("REQUESTID", "BANKID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table DONOR
-- ----------------------------
ALTER TABLE "BB"."DONOR" ADD CONSTRAINT "DONOR_FK" FOREIGN KEY ("DONORID") REFERENCES "BB"."USER_DONOR" ("DONORID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table DONOR_BLOOD_INFO
-- ----------------------------
ALTER TABLE "BB"."DONOR_BLOOD_INFO" ADD CONSTRAINT "DONOR_BLOOD_INFO_FK" FOREIGN KEY ("DONORID") REFERENCES "BB"."DONOR" ("DONORID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table DONOR_DONATES
-- ----------------------------
ALTER TABLE "BB"."DONOR_DONATES" ADD CONSTRAINT "DONOR_DONATES_FK" FOREIGN KEY ("DONORID") REFERENCES "BB"."DONOR" ("DONORID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table DONOR_MOBILE_NUMBER
-- ----------------------------
ALTER TABLE "BB"."DONOR_MOBILE_NUMBER" ADD CONSTRAINT "DONOR_MOBILE_NUMBER_FK" FOREIGN KEY ("DONORID") REFERENCES "BB"."DONOR" ("DONORID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table DONOR_USER_APPOINTMENTS
-- ----------------------------
ALTER TABLE "BB"."DONOR_USER_APPOINTMENTS" ADD CONSTRAINT "DONOR_USER_APPOINTMENTS_FK1" FOREIGN KEY ("REQUESTID") REFERENCES "BB"."BLOOD_REQUEST" ("REQUESTID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."DONOR_USER_APPOINTMENTS" ADD CONSTRAINT "DONOR_USER_APPOINTMENTS_FK2" FOREIGN KEY ("DONORID") REFERENCES "BB"."DONOR" ("DONORID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table USER_DONOR
-- ----------------------------
ALTER TABLE "BB"."USER_DONOR" ADD CONSTRAINT "USER_DONOR_FK" FOREIGN KEY ("USERID") REFERENCES "BB"."USERS" ("USERID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table USER_QNA
-- ----------------------------
ALTER TABLE "BB"."USER_QNA" ADD CONSTRAINT "USER_QNA_FK" FOREIGN KEY ("USERID") REFERENCES "BB"."USERS" ("USERID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table USER_QNA_ANSWER
-- ----------------------------
ALTER TABLE "BB"."USER_QNA_ANSWER" ADD CONSTRAINT "USER_QNA_ANSWER_FK1" FOREIGN KEY ("QNAID") REFERENCES "BB"."USER_QNA" ("QNAID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "BB"."USER_QNA_ANSWER" ADD CONSTRAINT "USER_QNA_ANSWER_FK2" FOREIGN KEY ("USERID") REFERENCES "BB"."USERS" ("USERID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table USER_REPORTS_DONOR
-- ----------------------------
ALTER TABLE "BB"."USER_REPORTS_DONOR" ADD CONSTRAINT "USER_REPORTS_DONOR_FK" FOREIGN KEY ("REQUESTID", "DONORID") REFERENCES "BB"."DONOR_USER_APPOINTMENTS" ("REQUESTID", "DONORID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table USER_REQUEST
-- ----------------------------
ALTER TABLE "BB"."USER_REQUEST" ADD CONSTRAINT "USER_REQUEST_FK" FOREIGN KEY ("USERID") REFERENCES "BB"."USERS" ("USERID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table WARNED_DONORS
-- ----------------------------
ALTER TABLE "BB"."WARNED_DONORS" ADD CONSTRAINT "WARNED_DONORS_FK" FOREIGN KEY ("DONORID") REFERENCES "BB"."DONOR" ("DONORID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
